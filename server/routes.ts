import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertRegistrationSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {


  app.get("/api/gc_callback", async (req, res) => {
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç GetCourse:", req.query);

    // –§—É–Ω–∫—Ü–∏—è sleep
    const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));

    await sleep(15000); // –∂–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º

    const url = "https://djambocommunity.getcourse.ru/pl/api/account/deals?key=6o9VC1KAml7oyN5U9Nt1489CmDJTebhfBAn6yFrED6dMa61mVxHLhHP7AYTLZvS8FwClUuf1JWSwQMrASIzurR5OWx3TLIKkFYEQ9JZlqfi8pMF2Kd7KkMg34RfiWA5E&created_at[from]=2025-07-20";

    try {
      const response = await fetch(url, { method: "GET", headers: { "Content-Type": "application/json" } });

      if (!response.ok) throw new Error(response.statusText);
      const data = await response.json();
      const exportId = data.info.export_id;
      await sleep(15000);
      const ids = await storage.getAllDealIds()
      try {
        console.log("exportId", exportId)
        const response = await fetch(`https://djambocommunity.getcourse.ru/pl/api/account/exports/${exportId}?key=6o9VC1KAml7oyN5U9Nt1489CmDJTebhfBAn6yFrED6dMa61mVxHLhHP7AYTLZvS8FwClUuf1JWSwQMrASIzurR5OWx3TLIKkFYEQ9JZlqfi8pMF2Kd7KkMg34RfiWA5E`)
        const data = await response.json();
        const items = data.info.items
        const filteredItems = items.filter((item) => ids.includes(String(item[1])));
        for (const item of filteredItems) {
          const dealNumber = String(item[1]); // –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
          const newStatus = String(item[9]);
          const existingOrder = await storage.getOrderByDealNumber(dealNumber);

          if (existingOrder) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Å—Ç–∞–ª "–ó–∞–≤–µ—Ä—à–µ–Ω"
            if (existingOrder.status !== newStatus && newStatus === "–ó–∞–≤–µ—Ä—à–µ–Ω") {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
              const updated = await storage.updateOrderStatus(dealNumber, newStatus);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              try {
                await fetch("http://localhost:8000/notify", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    message: `–ó–∞—è–≤–∫–∞ ${dealNumber} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${newStatus}"`,
                    order: updated // –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                  }),
                });
                console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${dealNumber}`);
              } catch (err) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", err);
              }
            }
          }
        }
        console.log("Filtered Items:", filteredItems);
        if (!data.success) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞");
        }

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", err);
      }
      console.log("–°–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:", data);
      res.status(200).json({ ok: true, data });
    } catch (err) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏:", err);
      res.status(500).json({ error: "Internal Server Error" });
    }
  });

  app.get("/api/check-payment/:dealNumber", async (req, res) => {
    const key =
      "6o9VC1KAml7oyN5U9Nt1489CmDJTebhfBAn6yFrED6dMa61mVxHLhHP7AYTLZvS8FwClUuf1JWSwQMrASIzurR5OWx3TLIKkFYEQ9JZlqfi8pMF2Kd7KkMg34RfiWA5E";

    const dealNumber = req.params.dealNumber;

    if (!dealNumber) {
      return res.status(400).json({ error: "dealNumber is required" });
    }

    try {
      const url = `https://djambocommunity.getcourse.ru/pl/api/account/deals?key=${key}&created_at[from]=2025-07-20`;
      const response = await fetch(url, { method: "GET", headers: { "Content-Type": "application/json" } });
      if (!response.ok) throw new Error(response.statusText);

      const data = await response.json();
      const exportId = data.info.export_id;

      // –∂–¥–µ–º –ø–æ–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–±–µ—Ä–µ—Ç—Å—è
      await new Promise(r => setTimeout(r, 15000));

      const exportResponse = await fetch(
        `https://djambocommunity.getcourse.ru/pl/api/account/exports/${exportId}?key=${key}`
      );
      const exportData = await exportResponse.json();

      const items = exportData.info.items;
      const foundItem = items.find(item => String(item[1]) === dealNumber);

      if (!foundItem) {
        return res.status(404).json({ error: "Deal not found" });
      }

      const newStatus = String(foundItem[9]); // –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
      const existingOrder = await storage.getOrderByDealNumber(dealNumber);

      let updatedOrder = null;
      if (existingOrder && existingOrder.status !== newStatus) {
        updatedOrder = await storage.updateOrderStatus(dealNumber, newStatus);
      }

      res.json({
        success: true,
        dealNumber,
        status: newStatus,
        updated: updatedOrder,
        paid: newStatus === "–ó–∞–≤–µ—Ä—à–µ–Ω"
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:", err);
      res.status(500).json({ error: "Internal Server Error" });
    }
  });

  // try {

  //   await fetch("http://localhost:8000/notify", {
  //     method: "POST",
  //     headers: { "Content-Type": "application/json" },
  //     body: JSON.stringify({
  //       message: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç GetCourse: ${JSON.stringify(req.query)}`,
  //     }),
  //   });
  // } catch (err) {
  //   console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:", err);
  // }



  // Registration endpoint




  app.post("/api/deal", async (req, res) => {
    const key =
      "6o9VC1KAml7oyN5U9Nt1489CmDJTebhfBAn6yFrED6dMa61mVxHLhHP7AYTLZvS8FwClUuf1JWSwQMrASIzurR5OWx3TLIKkFYEQ9JZlqfi8pMF2Kd7KkMg34RfiWA5E";

    try {
      const response = await fetch("https://djambocommunity.getcourse.ru/pl/api/deals", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          action: "add",
          key: key,
          params: req.body.params
        })
      });

      const data = await response.json();
      if (data.success && data.result?.payment_link) {
        res.json({ success: true, payment_link: data.result.payment_link });
      } else {
        res.status(400).json({ success: false, message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å payment_link", data });
      }
      let dealData = req.body.decoded;
      if (typeof dealData === "string") {
        try {
          dealData = JSON.parse(dealData);
        } catch (e) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å decoded:", req.body.decoded);
          return;
        }
      }
      if (!dealData?.deal) {
        console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç deal –≤ decoded", dealData);
        return;
      }
      const { deal } = dealData;
      console.log(deal);
      console.log("req.body:", req.body);
      try {
        if (!dealData?.deal?.deal_comment) {
          console.error("–û—à–∏–±–∫–∞: –≤ req.body.decoded –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ.");
          return;
        }

        const { deal } = dealData;
        const parts = String(deal.deal_comment).split(" ");

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–¥–µ–ª–∫–∏
        const orderToSave = {
          name: parts[0] || "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
          telegram: parts.find(p => p.startsWith("@")) || null,
          phone: parts.find(p => p.startsWith("+")) || null,
          email: parts.find(p => p.includes("@") && !p.startsWith("@")) || null,
          experience: parts.find(p => ["beginner", "intermediate", "advanced"].includes(p)) || null,
          status: deal.deal_status,
          deal_number: String(deal.deal_number)
        };

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ –Ω–∞—à–µ–≥–æ PgStorage
        await storage.createOrder(orderToSave);

      } catch (dbError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î:", dbError);
      }

    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GetCourse:", err);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GetCourse" });
    }
  });
  const httpServer = createServer(app);
  return httpServer;
}

async function sendToTelegramBot(registration: any) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID || process.env.CHAT_ID;

  if (!botToken || !chatId) {
    console.warn("Telegram bot token or chat ID not configured");
    return;
  }

  const message = `
üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤!*

üë§ *–ò–º—è:* ${registration.name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${registration.phone}
üìß *Email:* ${registration.email}
üìä *–û–ø—ã—Ç:* ${registration.experience || "–ù–µ —É–∫–∞–∑–∞–Ω"}
üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString("ru-RU")}

#–Ω–æ–≤–∞—è–∑–∞—è–≤–∫–∞ #–∫—Ä–∏–ø—Ç–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤
  `;

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.statusText}`);
    }

    console.log("Message sent to Telegram successfully");
  } catch (error) {
    console.error("Failed to send message to Telegram:", error);
  }
}
